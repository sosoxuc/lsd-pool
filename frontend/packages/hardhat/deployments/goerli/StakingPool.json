{
  "address": "0x83762311851E0aDfC5ba8A09B1E9856D92559FC8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keyGenerator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ssv_contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ssv_token",
          "type": "address"
        },
        {
          "internalType": "uint32[4]",
          "name": "ids",
          "type": "uint32[4]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "valueSent",
          "type": "uint256"
        }
      ],
      "name": "StakingPool__CantStakeZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "whitelistedAddress",
          "type": "address"
        }
      ],
      "name": "StakingPool__OnlyWhitelistAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sharesPublicKeys",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "KeySharesDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32[4]",
          "name": "newOperators",
          "type": "uint32[4]"
        }
      ],
      "name": "OperatorIDsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "PubKeyDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "SharePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserStaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SSV_CONTRACT_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSV_TOKEN_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Validators",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WhitelistKeyGenerator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pubkey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "_operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes",
          "name": "_shares",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct ISSVNetworkCore.Cluster",
          "name": "_cluster",
          "type": "tuple"
        }
      ],
      "name": "depositShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "depositValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExecutionRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperators",
      "outputs": [
        {
          "internalType": "uint32[4]",
          "name": "",
          "type": "uint32[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareprice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidators",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssvETH",
      "outputs": [
        {
          "internalType": "contract SSVETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBeaconRewards",
          "type": "uint256"
        }
      ],
      "name": "updateBeaconRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[4]",
          "name": "_newOperators",
          "type": "uint32[4]"
        }
      ],
      "name": "updateOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf270d9d63e1ec48b60d3eda420620042037a67640931671e2b0d5de988377a43",
  "receipt": {
    "to": null,
    "from": "0x44449d7cA8e3724cb9c9E30Ce49B286e275D79bf",
    "contractAddress": "0x1077A14F449A729543FB98443bB8ec917C5Ae7C4",
    "transactionIndex": 6,
    "gasUsed": "2348083",
    "logsBloom": "0x
    "blockHash": "0xcd393c3a354b9293497d81ce80dd6d6b929d1e10c4f5f292dd5b97dd01d79ea7",
    "transactionHash": "0xf270d9d63e1ec48b60d3eda420620042037a67640931671e2b0d5de988377a43",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 9171651,
        "transactionHash": "0xf270d9d63e1ec48b60d3eda420620042037a67640931671e2b0d5de988377a43",
        "address": "0x1077A14F449A729543FB98443bB8ec917C5Ae7C4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000044449d7ca8e3724cb9c9e30ce49b286e275d79bf"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xcd393c3a354b9293497d81ce80dd6d6b929d1e10c4f5f292dd5b97dd01d79ea7"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 9171651,
        "transactionHash": "0xf270d9d63e1ec48b60d3eda420620042037a67640931671e2b0d5de988377a43",
        "address": "0x8815A0D3cb64Fb9a3E1Aa57512dEaf691c3aBBcE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001077a14f449a729543fb98443bb8ec917c5ae7c4"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xcd393c3a354b9293497d81ce80dd6d6b929d1e10c4f5f292dd5b97dd01d79ea7"
      }
    ],
    "blockNumber": 9171651,
    "cumulativeGasUsed": "2613040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x44449d7cA8e3724cb9c9E30Ce49B286e275D79bf",
    "0xff50ed3d0ec03ac01d4c79aad74928bff48a7b2b",
    "0x44449d7cA8e3724cb9c9E30Ce49B286e275D79bf",
    "0xAfdb141Dd99b5a101065f40e3D7636262dce65b3",
    "0x3a9f01091C446bdE031E39ea8354647AFef091E7",
    [
      4,
      9,
      17,
      76
    ]
  ],
  "numDeployments": 4,
  "solcInputHash": "2aba8a8ed001d27dc9bafad75f2f803c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyGenerator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ssv_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ssv_token\",\"type\":\"address\"},{\"internalType\":\"uint32[4]\",\"name\":\"ids\",\"type\":\"uint32[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueSent\",\"type\":\"uint256\"}],\"name\":\"StakingPool__CantStakeZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"whitelistedAddress\",\"type\":\"address\"}],\"name\":\"StakingPool__OnlyWhitelistAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sharesPublicKeys\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KeySharesDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[4]\",\"name\":\"newOperators\",\"type\":\"uint32[4]\"}],\"name\":\"OperatorIDsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"PubKeyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"SharePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SSV_CONTRACT_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSV_TOKEN_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Validators\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhitelistKeyGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"_operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes\",\"name\":\"_shares\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"_cluster\",\"type\":\"tuple\"}],\"name\":\"depositShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"depositValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutionRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"uint32[4]\",\"name\":\"\",\"type\":\"uint32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssvETH\",\"outputs\":[{\"internalType\":\"contract SSVETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBeaconRewards\",\"type\":\"uint256\"}],\"name\":\"updateBeaconRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[4]\",\"name\":\"_newOperators\",\"type\":\"uint32[4]\"}],\"name\":\"updateOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositShares(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,uint256,bool))\":{\"details\":\"Callable by the whitelisted address\",\"params\":{\"_amount\":\": Amount of tokens to be deposited\",\"_cluster\":\": Latest Cluster information\",\"_operatorIds\":\": IDs of the validator's operators\",\"_pubkey\":\": Public key of the validator\",\"_shares\":\": Public keys of the shares\"}},\"depositValidator(bytes,bytes,bytes,bytes32)\":{\"params\":{\"_deposit_data_root\":\": Root of the deposit data\",\"_pubkey\":\": Public key of the validator\",\"_signature\":\": Signature of the deposit data\",\"_withdrawal_credentials\":\": Withdrawal credentials of the validator\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unStake(uint256)\":{\"params\":{\"_amount\":\": Amount to be unstaked\"}},\"updateBeaconRewards(uint256)\":{\"details\":\"Update share price of the staking pool\",\"params\":{\"_newBeaconRewards\":\": The new beacon rewards amount\"}},\"updateOperators(uint32[4])\":{\"details\":\"Update operators\",\"params\":{\"_newOperators\":\": Array of the the new operators Ids\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"StakingPool__CantStakeZeroAmount(uint256)\":[{\"notice\":\"this contract utilizes custom errors to optimize gas usage, instead of normal `require` conditionals. By using custom errors instead, we don't need to use up storage space on the `require`'s revert string messages. This also allows developers and users to see customizable output values when the custom error is invoked \"}]},\"kind\":\"user\",\"methods\":{\"depositShares(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,uint256,bool))\":{\"notice\":\"Deposit shares for a validator\"},\"depositValidator(bytes,bytes,bytes,bytes32)\":{\"notice\":\"Deposit a validator to the deposit contract\"},\"getBeaconRewards()\":{\"notice\":\"Get beacon rewards\"},\"getExecutionRewards()\":{\"notice\":\"Get execution rewards\"},\"getOperators()\":{\"notice\":\"Get operator ids, check operators here https://explorer.ssv.network/\"},\"getShareprice()\":{\"notice\":\"Get share price\"},\"getUserStake(address)\":{\"notice\":\"Get user's staked amount\"},\"getValidators()\":{\"notice\":\"Get validators array\"},\"stake()\":{\"notice\":\"Stake tokens\"},\"unStake(uint256)\":{\"notice\":\"Unstake tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SSVETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract SSVETH is ERC20, Ownable {\\r\\n    address public minter;\\r\\n    uint256 public sharePrice = 1e18;\\r\\n\\r\\n    // ICommon immutable CommonContract;\\r\\n    constructor() ERC20(\\\"decentralized staking with ssv\\\", \\\"ssvETH\\\") {\\r\\n        minter = msg.sender;\\r\\n    }\\r\\n\\r\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\r\\n        _mint(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function changeSharePrice(uint256 new_price) external onlyOwner {\\r\\n        sharePrice = new_price;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xccda7ce14288da994174085ef0042d41623a44286e11c85d290de4a7b41d0dd6\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\r\\nimport \\\"./interfaces/mocks/ISSVNetwork.sol\\\";\\r\\nimport \\\"./SSVETH.sol\\\";\\r\\n\\r\\n/** this contract utilizes custom errors to optimize gas usage, instead of normal `require` conditionals.\\r\\n * By using custom errors instead, we don't need to use up storage space on the `require`'s revert string messages.\\r\\n * This also allows developers and users to see customizable output values when the custom error is invoked */\\r\\nerror StakingPool__CantStakeZeroAmount(uint valueSent);\\r\\nerror StakingPool__OnlyWhitelistAddress(\\r\\n    address caller,\\r\\n    address whitelistedAddress\\r\\n);\\r\\n\\r\\ncontract StakingPool is Ownable, ReentrancyGuard {\\r\\n    address public WhitelistKeyGenerator;\\r\\n    address public WITHDRAWAL_ADDRESS;\\r\\n    IDepositContract immutable DepositContract;\\r\\n    SSVETH public ssvETH;\\r\\n    uint256 public immutable VALIDATOR_AMOUNT = 32 * 1e18;\\r\\n    address public SSV_TOKEN_ADDR;\\r\\n    address public SSV_CONTRACT_ADDR;\\r\\n    uint32[4] OperatorIDs;\\r\\n    bytes[] public Validators;\\r\\n    // address public Oracle_address;\\r\\n\\r\\n    uint256 private beaconRewards;\\r\\n    uint256 private executionRewards;\\r\\n\\r\\n    mapping(address => uint256) private userStake;\\r\\n\\r\\n    event UserStaked(address user_address, uint256 amount);\\r\\n    event PubKeyDeposited(bytes pubkey);\\r\\n    event OperatorIDsChanged(uint32[4] newOperators);\\r\\n    event SharePriceUpdated(uint256 newPrice);\\r\\n    event KeySharesDeposited(\\r\\n        bytes pubkey,\\r\\n        bytes sharesPublicKeys,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address keyGenerator,\\r\\n        address depositAddress,\\r\\n        address withdrawal,\\r\\n        address ssv_contract,\\r\\n        address ssv_token,\\r\\n        uint32[4] memory ids\\r\\n    ) {\\r\\n        WITHDRAWAL_ADDRESS = withdrawal;\\r\\n        WhitelistKeyGenerator = keyGenerator;\\r\\n        DepositContract = IDepositContract(depositAddress);\\r\\n        SSVETH _ssvETH = new SSVETH();\\r\\n        ssvETH = SSVETH(address(_ssvETH));\\r\\n        SSV_CONTRACT_ADDR = ssv_contract;\\r\\n        SSV_TOKEN_ADDR = ssv_token;\\r\\n        OperatorIDs = ids;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice called when the contract receives eth\\r\\n     */\\r\\n    receive() external payable {\\r\\n        updateExecutionRewards(msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get operator ids, check operators here https://explorer.ssv.network/\\r\\n     */\\r\\n    function getOperators() public view returns (uint32[4] memory) {\\r\\n        return OperatorIDs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get validators array\\r\\n     */\\r\\n    function getValidators() public view returns (bytes[] memory) {\\r\\n        return Validators;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get user's staked amount\\r\\n     */\\r\\n    function getUserStake(address _userAddress) public view returns (uint256) {\\r\\n        return userStake[_userAddress];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get share price\\r\\n     */\\r\\n    function getShareprice() public view returns (uint256) {\\r\\n        uint256 _sharePrice = ssvETH.sharePrice();\\r\\n        return _sharePrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get beacon rewards\\r\\n     */\\r\\n    function getBeaconRewards() public view returns (uint256) {\\r\\n        return beaconRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get execution rewards\\r\\n     */\\r\\n    function getExecutionRewards() public view returns (uint256) {\\r\\n        return executionRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update operators\\r\\n     * @param _newOperators: Array of the the new operators Ids\\r\\n     */\\r\\n    function updateOperators(uint32[4] memory _newOperators) public onlyOwner {\\r\\n        OperatorIDs = _newOperators;\\r\\n        emit OperatorIDsChanged(_newOperators);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update share price of the staking pool\\r\\n     * @param _newBeaconRewards: The new beacon rewards amount\\r\\n     */\\r\\n    function updateBeaconRewards(uint256 _newBeaconRewards) external onlyOwner {\\r\\n        beaconRewards = _newBeaconRewards;\\r\\n        uint256 _newSharePrice = (beaconRewards +\\r\\n            executionRewards +\\r\\n            (Validators.length * 32)) / (Validators.length * 32);\\r\\n        updateSharePrice(_newSharePrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake tokens\\r\\n     */\\r\\n\\r\\n    function stake() public payable {\\r\\n        /** Ensuring that the caller has passed atleast some value to the function/contract. \\r\\n        This contract utilizes custom errors to optimize gas usage, instead of normal `require` conditionals */\\r\\n        if (msg.value <= 0) {\\r\\n            revert StakingPool__CantStakeZeroAmount(msg.value);\\r\\n        }\\r\\n        uint256 amount_minted = (msg.value * ssvETH.sharePrice()) / 1e18;\\r\\n        ssvETH.mint(msg.sender, amount_minted);\\r\\n        emit UserStaked(msg.sender, msg.value);\\r\\n        userStake[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake tokens\\r\\n     * @param _amount: Amount to be unstaked\\r\\n     */\\r\\n    function unStake(uint256 _amount) public {\\r\\n        ssvETH.transferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _amount_to_transfer = (_amount / ssvETH.sharePrice()) * 1e18;\\r\\n        payable(msg.sender).transfer(_amount_to_transfer);\\r\\n        userStake[msg.sender] -= _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit a validator to the deposit contract\\r\\n     * @param _pubkey: Public key of the validator\\r\\n     * @param _withdrawal_credentials: Withdrawal credentials of the validator\\r\\n     * @param _signature: Signature of the deposit data\\r\\n     * @param _deposit_data_root: Root of the deposit data\\r\\n     */\\r\\n    function depositValidator(\\r\\n        bytes calldata _pubkey,\\r\\n        bytes calldata _withdrawal_credentials,\\r\\n        bytes calldata _signature,\\r\\n        bytes32 _deposit_data_root\\r\\n    ) external {\\r\\n        // Deposit the validator to the deposit contract\\r\\n        DepositContract.deposit{value: VALIDATOR_AMOUNT}(\\r\\n            _pubkey,\\r\\n            _withdrawal_credentials,\\r\\n            _signature,\\r\\n            _deposit_data_root\\r\\n        );\\r\\n\\r\\n        // Add the public key to the list of validators\\r\\n        Validators.push(_pubkey);\\r\\n        // Emit an event to log the deposit of the public key\\r\\n        emit PubKeyDeposited(_pubkey);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit shares for a validator\\r\\n     * @param _pubkey: Public key of the validator\\r\\n     * @param _operatorIds: IDs of the validator's operators\\r\\n     * @param _shares: Public keys of the shares\\r\\n     * @param _amount: Amount of tokens to be deposited\\r\\n     * @param _cluster: Latest Cluster information\\r\\n     * @dev Callable by the whitelisted address\\r\\n     */\\r\\n    function depositShares(\\r\\n        bytes calldata _pubkey,\\r\\n        uint64[] calldata _operatorIds,\\r\\n        bytes calldata _shares,\\r\\n        uint256 _amount,\\r\\n        ISSVNetworkCore.Cluster memory _cluster\\r\\n    ) external {\\r\\n        /* Check if the message sender is the whitelisted address\\r\\n         * This contract utilizes custom errors to optimize gas usage, instead of normal `require` conditionals */\\r\\n        if (msg.sender != WhitelistKeyGenerator) {\\r\\n            revert StakingPool__OnlyWhitelistAddress(\\r\\n                msg.sender,\\r\\n                WhitelistKeyGenerator\\r\\n            );\\r\\n        }\\r\\n        // Approve the transfer of tokens to the SSV contract\\r\\n        IERC20(SSV_TOKEN_ADDR).approve(SSV_CONTRACT_ADDR, _amount);\\r\\n        // Register the validator and deposit the shares\\r\\n        ISSVNetwork(SSV_CONTRACT_ADDR).registerValidator(\\r\\n            _pubkey,\\r\\n            _operatorIds,\\r\\n            _shares,\\r\\n            _amount,\\r\\n            _cluster\\r\\n        );\\r\\n\\r\\n        // Emit an event to log the deposit of shares\\r\\n        emit KeySharesDeposited(_pubkey, _shares, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update execution rewards\\r\\n     * @param _newExecutionRewards:  Execution rewards amount added\\r\\n     */\\r\\n    function updateExecutionRewards(uint256 _newExecutionRewards) internal {\\r\\n        executionRewards += _newExecutionRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update share price of the staking pool\\r\\n     * @param _newSharePrice: The new share price amount\\r\\n     */\\r\\n    function updateSharePrice(uint256 _newSharePrice) internal {\\r\\n        ssvETH.changeSharePrice(_newSharePrice);\\r\\n        emit SharePriceUpdated(_newSharePrice);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x04cda4cf525d35e2e99fdb06bf2f065c2daf2510527dcc673819d9c8a6bd3e9d\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDepositContract {\\r\\n    /// @notice A processed deposit event.\\r\\n    event DepositEvent(\\r\\n        bytes pubkey,\\r\\n        bytes withdrawal_credentials,\\r\\n        bytes amount,\\r\\n        bytes signature,\\r\\n        bytes index\\r\\n    );\\r\\n\\r\\n    /// @notice Submit a Phase 0 DepositData object.\\r\\n    /// @param pubkey A BLS12-381 public key.\\r\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\r\\n    /// @param signature A BLS12-381 signature.\\r\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\r\\n    /// Used as a protection against malformed input.\\r\\n    function deposit(\\r\\n        bytes calldata pubkey,\\r\\n        bytes calldata withdrawal_credentials,\\r\\n        bytes calldata signature,\\r\\n        bytes32 deposit_data_root\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Query the current deposit root hash.\\r\\n    /// @return The deposit root hash.\\r\\n    function get_deposit_root() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Query the current deposit count.\\r\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\r\\n    function get_deposit_count() external view returns (bytes memory);\\r\\n}\",\"keccak256\":\"0x5996249aad3515775f82c8b9a7872db2ce2fd1fc7c04423111b7dd8885d5f5bd\",\"license\":\"MIT\"},\"contracts/interfaces/mocks/ISSVNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"./ISSVNetworkCore.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ISSVNetwork is ISSVNetworkCore {\\r\\n    /**********/\\r\\n    /* Events */\\r\\n    /**********/\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new operator has been added.\\r\\n     * @param operatorId operator's ID.\\r\\n     * @param owner Operator's ethereum address that can collect fees.\\r\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\r\\n     * @param fee Operator's fee.\\r\\n     */\\r\\n    event OperatorAdded(uint64 indexed operatorId, address indexed owner, bytes publicKey, uint256 fee);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when operator has been removed.\\r\\n     * @param operatorId operator's ID.\\r\\n     */\\r\\n    event OperatorRemoved(uint64 indexed operatorId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the whitelist of an operator is updated.\\r\\n     * @param operatorId operator's ID.\\r\\n     * @param whitelisted operator's new whitelisted address.\\r\\n     */\\r\\n    event OperatorWhitelistUpdated(uint64 indexed operatorId, address whitelisted);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the validator has been added.\\r\\n     * @param publicKey The public key of a validator.\\r\\n     * @param operatorIds The operator ids list.\\r\\n     * @param shares snappy compressed shares(a set of encrypted and public shares).\\r\\n     * @param cluster All the cluster data.\\r\\n     */\\r\\n    event ValidatorAdded(address indexed owner, uint64[] operatorIds, bytes publicKey, bytes shares, Cluster cluster);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the validator is removed.\\r\\n     * @param publicKey The public key of a validator.\\r\\n     * @param operatorIds The operator ids list.\\r\\n     * @param cluster All the cluster data.\\r\\n     */\\r\\n    event ValidatorRemoved(address indexed owner, uint64[] operatorIds, bytes publicKey, Cluster cluster);\\r\\n\\r\\n    event OperatorFeeDeclared(address indexed owner, uint64 indexed operatorId, uint256 blockNumber, uint256 fee);\\r\\n\\r\\n    event OperatorFeeCancellationDeclared(address indexed owner, uint64 indexed operatorId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when an operator's fee is updated.\\r\\n     * @param owner Operator's owner.\\r\\n     * @param blockNumber from which block number.\\r\\n     * @param fee updated fee value.\\r\\n     */\\r\\n    event OperatorFeeExecuted(address indexed owner, uint64 indexed operatorId, uint256 blockNumber, uint256 fee);\\r\\n\\r\\n    event ClusterLiquidated(address indexed owner, uint64[] operatorIds, Cluster cluster);\\r\\n\\r\\n    event ClusterReactivated(address indexed owner, uint64[] operatorIds, Cluster cluster);\\r\\n\\r\\n    event OperatorFeeIncreaseLimitUpdated(uint64 value);\\r\\n\\r\\n    event DeclareOperatorFeePeriodUpdated(uint64 value);\\r\\n\\r\\n    event ExecuteOperatorFeePeriodUpdated(uint64 value);\\r\\n\\r\\n    event LiquidationThresholdPeriodUpdated(uint64 value);\\r\\n\\r\\n    event MinimumLiquidationCollateralUpdated(uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the network fee is updated.\\r\\n     * @param oldFee The old fee\\r\\n     * @param newFee The new fee\\r\\n     */\\r\\n    event NetworkFeeUpdated(uint256 oldFee, uint256 newFee);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when transfer fees are withdrawn.\\r\\n     * @param value The amount of tokens withdrawn.\\r\\n     * @param recipient The recipient address.\\r\\n     */\\r\\n    event NetworkEarningsWithdrawn(uint256 value, address recipient);\\r\\n\\r\\n    event ClusterWithdrawn(address indexed owner, uint64[] operatorIds, uint256 value, Cluster cluster);\\r\\n    event OperatorWithdrawn(address indexed owner, uint64 indexed operatorId, uint256 value);\\r\\n\\r\\n    event ClusterDeposited(address indexed owner, uint64[] operatorIds, uint256 value, Cluster cluster);\\r\\n\\r\\n    event FeeRecipientAddressUpdated(address indexed owner, address recipientAddress);\\r\\n\\r\\n    /****************/\\r\\n    /* Initializers */\\r\\n    /****************/\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract.\\r\\n     * @param token_ The network token.\\r\\n     * @param operatorMaxFeeIncrease_ The step limit to increase the operator fee\\r\\n     * @param declareOperatorFeePeriod_ The period an operator needs to wait before they can approve their fee.\\r\\n     * @param executeOperatorFeePeriod_ The length of the period in which an operator can approve their fee.\\r\\n     */\\r\\n    function initialize(\\r\\n        string calldata initialVersion_,\\r\\n        IERC20 token_,\\r\\n        uint64 operatorMaxFeeIncrease_,\\r\\n        uint64 declareOperatorFeePeriod_,\\r\\n        uint64 executeOperatorFeePeriod_,\\r\\n        uint64 minimumBlocksBeforeLiquidation_,\\r\\n        uint256 minimumLiquidationCollateral_\\r\\n    ) external;\\r\\n\\r\\n    /*******************************/\\r\\n    /* Operator External Functions */\\r\\n    /*******************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Registers a new operator.\\r\\n     * @param publicKey Operator's public key. Used to encrypt secret shares of validators keys.\\r\\n     * @param fee operator's fee. When fee is set to zero (mostly for private operators), it can not be increased.\\r\\n     */\\r\\n    function registerOperator(bytes calldata publicKey, uint256 fee) external returns (uint64);\\r\\n\\r\\n    /**\\r\\n     * @dev Removes an operator.\\r\\n     * @param operatorId Operator's id.\\r\\n     */\\r\\n    function removeOperator(uint64 operatorId) external;\\r\\n\\r\\n    function setOperatorWhitelist(uint64 operatorId, address whitelisted) external;\\r\\n\\r\\n    function declareOperatorFee(uint64 operatorId, uint256 fee) external;\\r\\n\\r\\n    function executeOperatorFee(uint64 operatorId) external;\\r\\n\\r\\n    function cancelDeclaredOperatorFee(uint64 operatorId) external;\\r\\n\\r\\n    function reduceOperatorFee(uint64 operatorId, uint256 fee) external;\\r\\n\\r\\n    function setFeeRecipientAddress(address feeRecipientAddress) external;\\r\\n\\r\\n    /********************************/\\r\\n    /* Validator External Functions */\\r\\n    /********************************/\\r\\n\\r\\n    function registerValidator(\\r\\n        bytes calldata publicKey,\\r\\n        uint64[] memory operatorIds,\\r\\n        bytes calldata sharesEncrypted,\\r\\n        uint256 amount,\\r\\n        Cluster memory cluster\\r\\n    ) external;\\r\\n\\r\\n    function removeValidator(bytes calldata publicKey, uint64[] memory operatorIds, Cluster memory cluster) external;\\r\\n\\r\\n    /**************************/\\r\\n    /* Cluster External Functions */\\r\\n    /**************************/\\r\\n\\r\\n    function liquidate(address owner, uint64[] memory operatorIds, Cluster memory cluster) external;\\r\\n\\r\\n    function reactivate(uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\\r\\n\\r\\n    /******************************/\\r\\n    /* Balance External Functions */\\r\\n    /******************************/\\r\\n\\r\\n    function deposit(address owner, uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\\r\\n\\r\\n    function withdrawOperatorEarnings(uint64 operatorId, uint256 tokenAmount) external;\\r\\n\\r\\n    function withdrawOperatorEarnings(uint64 operatorId) external;\\r\\n\\r\\n    function withdraw(uint64[] memory operatorIds, uint256 tokenAmount, Cluster memory cluster) external;\\r\\n\\r\\n    /**************************/\\r\\n    /* DAO External Functions */\\r\\n    /**************************/\\r\\n\\r\\n    function updateNetworkFee(uint256 fee) external;\\r\\n\\r\\n    function withdrawNetworkEarnings(uint256 amount) external;\\r\\n\\r\\n    function updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) external;\\r\\n\\r\\n    function updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) external;\\r\\n\\r\\n    function updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) external;\\r\\n\\r\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external;\\r\\n\\r\\n    function updateMinimumLiquidationCollateral(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3aee5ff8905540e05b8218c40d010f454c6a74109a2ca68d5f6800bcda5a16a9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/mocks/ISSVNetworkCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ISSVNetworkCore {\\r\\n    /***********/\\r\\n    /* Structs */\\r\\n    /***********/\\r\\n\\r\\n    struct Validator {\\r\\n        address owner;\\r\\n        bool active;\\r\\n    }\\r\\n    struct Snapshot {\\r\\n        /// @dev block is the last block in which last index was set. For Operator, it's also used to identify an active / inactive one.\\r\\n        uint64 block;\\r\\n        /// @dev index is the last index calculated by index += (currentBlock - block) * fee\\r\\n        uint64 index;\\r\\n        /// @dev accumulated is all the accumulated earnings, calculated by accumulated + lastIndex * validatorCount\\r\\n        uint64 balance;\\r\\n    }\\r\\n\\r\\n    struct Operator {\\r\\n        address owner;\\r\\n        /// @dev when fee is set to zero (mostly for private operators), it can not be increased\\r\\n        uint64 fee;\\r\\n        uint32 validatorCount;\\r\\n        Snapshot snapshot;\\r\\n    }\\r\\n\\r\\n    struct OperatorFeeChangeRequest {\\r\\n        uint64 fee;\\r\\n        uint64 approvalBeginTime;\\r\\n        uint64 approvalEndTime;\\r\\n    }\\r\\n\\r\\n    struct Cluster {\\r\\n        uint32 validatorCount;\\r\\n        uint64 networkFeeIndex;\\r\\n        uint64 index;\\r\\n        uint256 balance;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    struct DAO {\\r\\n        uint32 validatorCount;\\r\\n        uint64 balance;\\r\\n        uint64 block;\\r\\n    }\\r\\n\\r\\n    struct Network {\\r\\n        uint64 networkFee;\\r\\n        uint64 networkFeeIndex;\\r\\n        uint64 networkFeeIndexBlockNumber;\\r\\n    }\\r\\n\\r\\n    /**********/\\r\\n    /* Errors */\\r\\n    /**********/\\r\\n\\r\\n    error CallerNotOwner();\\r\\n    error CallerNotWhitelisted();\\r\\n    error FeeTooLow();\\r\\n    error FeeExceedsIncreaseLimit();\\r\\n    error NoFeeDelcared();\\r\\n    error ApprovalNotWithinTimeframe();\\r\\n    error OperatorDoesNotExist();\\r\\n    error InsufficientBalance();\\r\\n    error ValidatorAlreadyExists();\\r\\n    error ValidatorDoesNotExist();\\r\\n    error ClusterNotLiquidatable();\\r\\n    error InvalidPublicKeyLength();\\r\\n    error InvalidOperatorIdsLength();\\r\\n    error ValidatorOwnedByOtherAddress();\\r\\n    error ClusterAlreadyEnabled();\\r\\n    error ClusterIsLiquidated();\\r\\n    error ClusterDoesNotExists();\\r\\n    error IncorrectClusterState();\\r\\n    error UnsortedOperatorsList();\\r\\n    error NewBlockPeriodIsBelowMinimum();\\r\\n    error ExceedValidatorLimit();\\r\\n    error TokenTransferFailed();\\r\\n    error SameFeeChangeNotAllowed();\\r\\n    error FeeIncreaseNotAllowed();\\r\\n}\\r\\n\",\"keccak256\":\"0xee7bf3a620625d6be166908e85c5859dfee748416b3193ed6ad89367f40efd71\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040526801bc16d674ec80000060a0523480156200001e57600080fd5b50604051620029423803806200294283398101604081905262000041916200026c565b6200004c336200010c565b60018055600380546001600160a01b038087166001600160a01b031992831617909255600280548984169216919091179055851660805260405160009062000094906200015c565b604051809103906000f080158015620000b1573d6000803e3d6000fd5b50600480546001600160a01b038084166001600160a01b0319928316178355600680548983169084161790556005805491881691909216179055909150620000fe9060079084906200016a565b50505050505050506200035a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e1a8062001b2883390190565b600183019183908215620001fb5791602002820160005b83821115620001c757835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030262000181565b8015620001f95782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620001c7565b505b50620002099291506200020d565b5090565b5b808211156200020957600081556001016200020e565b80516001600160a01b03811681146200023c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b805163ffffffff811681146200023c57600080fd5b60008060008060008061012080888a0312156200028857600080fd5b620002938862000224565b96506020620002a4818a0162000224565b9650620002b460408a0162000224565b9550620002c460608a0162000224565b9450620002d460808a0162000224565b93508960bf8a0112620002e657600080fd5b604051608081016001600160401b03811182821017156200030b576200030b62000241565b60405291890191808b8411156200032157600080fd5b60a08b015b8481101562000348576200033a8162000257565b825290830190830162000326565b50508093505050509295509295509295565b60805160a0516117a1620003876000396000818161029d0152610b3301526000610b0a01526117a16000f3fe6080604052600436106101395760003560e01c80638da5cb5b116100ab578063cc9fbb761161006f578063cc9fbb7614610375578063df8af7c214610395578063e6ebe20c146103b5578063ed97013b146103ca578063f2fde38b146103ea578063f8d0c40b1461040a57600080fd5b80638da5cb5b146102bf57806398e4349f146102dd578063b7ab4db5146102fd578063bbadc93a1461031f578063bf3a6c0a1461035557600080fd5b80632601d3c7116100fd5780632601d3c71461020c57806327a099d81461022c5780633a4b66f11461024e5780635d3eea9114610256578063715018a6146102765780637b4bc9351461028b57600080fd5b8063060c8ad71461014e57806307d0e5401461017257806307dc739f146101aa5780630df8d1e8146101d75780631b7e5127146101ec57600080fd5b36610149576101473461042a565b005b600080fd5b34801561015a57600080fd5b506009545b6040519081526020015b60405180910390f35b34801561017e57600080fd5b50600554610192906001600160a01b031681565b6040516001600160a01b039091168152602001610169565b3480156101b657600080fd5b506101ca6101c5366004610f64565b610444565b6040516101699190610fc3565b3480156101e357600080fd5b50600a5461015f565b3480156101f857600080fd5b50610147610207366004610f64565b6104f0565b34801561021857600080fd5b50600354610192906001600160a01b031681565b34801561023857600080fd5b5061024161054f565b6040516101699190610fdd565b6101476105b5565b34801561026257600080fd5b50610147610271366004610f64565b610728565b34801561028257600080fd5b50610147610893565b34801561029757600080fd5b5061015f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cb57600080fd5b506000546001600160a01b0316610192565b3480156102e957600080fd5b506101476102f836600461113f565b6108a7565b34801561030957600080fd5b50610312610a1a565b6040516101699190611225565b34801561032b57600080fd5b5061015f61033a366004611287565b6001600160a01b03166000908152600b602052604090205490565b34801561036157600080fd5b506101476103703660046112b0565b610af3565b34801561038157600080fd5b50600654610192906001600160a01b031681565b3480156103a157600080fd5b50600454610192906001600160a01b031681565b3480156103c157600080fd5b5061015f610c22565b3480156103d657600080fd5b506101476103e5366004611353565b610c95565b3480156103f657600080fd5b50610147610405366004611287565b610ce5565b34801561041657600080fd5b50600254610192906001600160a01b031681565b80600a600082825461043c91906113ee565b909155505050565b6008818154811061045457600080fd5b90600052602060002001600091509050805461046f90611401565b80601f016020809104026020016040519081016040528092919081815260200182805461049b90611401565b80156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b505050505081565b6104f8610d5e565b600981905560085460009061050e90602061143b565b60085461051c90602061143b565b600a5460095461052c91906113ee565b61053691906113ee565b6105409190611452565b905061054b81610db8565b5050565b610557610e95565b60408051608081019182905290600790600490826000855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161056f5790505050505050905090565b600034116105dd57604051639ed431ad60e01b81523460048201526024015b60405180910390fd5b6004805460408051638726972960e01b81529051600093670de0b6b3a7640000936001600160a01b031692638726972992818301926020928290030181865afa15801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190611474565b61065c903461143b565b6106669190611452565b600480546040516340c10f1960e01b81523392810192909252602482018390529192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b5050604080513381523460208201527f8c265adcfa641899d6632b86254dda7a76f27701f1d21a732621d51f2328c460935001905060405180910390a1336000908152600b60205260408120805434929061043c9084906113ee565b600480546040516323b872dd60e01b81523392810192909252306024830152604482018390526001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a4919061148d565b506000600460009054906101000a90046001600160a01b03166001600160a01b031663872697296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190611474565b6108289083611452565b61083a90670de0b6b3a764000061143b565b604051909150339082156108fc029083906000818181858888f1935050505015801561086a573d6000803e3d6000fd5b50336000908152600b60205260408120805484929061088a9084906114aa565b90915550505050565b61089b610d5e565b6108a56000610e45565b565b6002546001600160a01b031633146108e7576002546040516301f5a31f60e71b81523360048201526001600160a01b0390911660248201526044016105d4565b60055460065460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610960919061148d565b5060065460405163967ef80760e01b81526001600160a01b039091169063967ef8079061099f908b908b908b908b908b908b908b908b906004016114e6565b600060405180830381600087803b1580156109b957600080fd5b505af11580156109cd573d6000803e3d6000fd5b505050507fb23f6ce72d618df33a33105741ed7e13469f7f9ca6eda19e5e505b28783b1f288888868686604051610a089594939291906115b4565b60405180910390a15050505050505050565b60606008805480602002602001604051908101604052809291908181526020016000905b82821015610aea578382906000526020600020018054610a5d90611401565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8990611401565b8015610ad65780601f10610aab57610100808354040283529160200191610ad6565b820191906000526020600020905b815481529060010190602001808311610ab957829003601f168201915b505050505081526020019060010190610a3e565b50505050905090565b6040516304512a2360e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906322895118907f000000000000000000000000000000000000000000000000000000000000000090610b6d908b908b908b908b908b908b908b906004016115ee565b6000604051808303818588803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b5050600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3019250610bdf9150889050898361168e565b507f144679c9e19454710222d38e13b257573a15b6ca6a4d10a1254ebc2480cb68638787604051610c1192919061174f565b60405180910390a150505050505050565b6004805460408051638726972960e01b8152905160009384936001600160a01b031692638726972992818301926020928290030181865afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f9190611474565b92915050565b610c9d610d5e565b610caa6007826004610eb3565b507fa31d33307023a78b2b477792a91efbed5ee91448638292c891e81233cb6108f881604051610cda9190610fdd565b60405180910390a150565b610ced610d5e565b6001600160a01b038116610d525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d4565b610d5b81610e45565b50565b6000546001600160a01b031633146108a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d4565b60048054604051634164020160e01b81529182018390526001600160a01b031690634164020190602401600060405180830381600087803b158015610dfc57600080fd5b505af1158015610e10573d6000803e3d6000fd5b505050507fce44720b7462058f31ddecab3daa427921e5975d9acb555f043682dada86656981604051610cda91815260200190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180608001604052806004906020820280368337509192915050565b600183019183908215610f3f5791602002820160005b83821115610f0d57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610ec9565b8015610f3d5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610f0d565b505b50610f4b929150610f4f565b5090565b5b80821115610f4b5760008155600101610f50565b600060208284031215610f7657600080fd5b5035919050565b6000815180845260005b81811015610fa357602081850181015186830182015201610f87565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610fd66020830184610f7d565b9392505050565b60808101818360005b600481101561100b57815163ffffffff16835260209283019290910190600101610fe6565b50505092915050565b60008083601f84011261102657600080fd5b50813567ffffffffffffffff81111561103e57600080fd5b60208301915083602082850101111561105657600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff8116811461108757600080fd5b919050565b803567ffffffffffffffff8116811461108757600080fd5b8015158114610d5b57600080fd5b600060a082840312156110c457600080fd5b60405160a0810181811067ffffffffffffffff821117156110e7576110e761105d565b6040529050806110f683611073565b81526111046020840161108c565b60208201526111156040840161108c565b6040820152606083013560608201526080830135611132816110a4565b6080919091015292915050565b600080600080600080600080610120898b03121561115c57600080fd5b883567ffffffffffffffff8082111561117457600080fd5b6111808c838d01611014565b909a50985060208b013591508082111561119957600080fd5b818b0191508b601f8301126111ad57600080fd5b8135818111156111bc57600080fd5b8c60208260051b85010111156111d157600080fd5b6020830198508097505060408b01359150808211156111ef57600080fd5b506111fc8b828c01611014565b909550935050606089013591506112168a60808b016110b2565b90509295985092959890939650565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561127a57603f19888603018452611268858351610f7d565b9450928501929085019060010161124c565b5092979650505050505050565b60006020828403121561129957600080fd5b81356001600160a01b0381168114610fd657600080fd5b60008060008060008060006080888a0312156112cb57600080fd5b873567ffffffffffffffff808211156112e357600080fd5b6112ef8b838c01611014565b909950975060208a013591508082111561130857600080fd5b6113148b838c01611014565b909750955060408a013591508082111561132d57600080fd5b5061133a8a828b01611014565b989b979a50959894979596606090950135949350505050565b60006080828403121561136557600080fd5b82601f83011261137457600080fd5b6040516080810181811067ffffffffffffffff821117156113975761139761105d565b6040528060808401858111156113ac57600080fd5b845b818110156113cd576113bf81611073565b8352602092830192016113ae565b509195945050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c8f57610c8f6113d8565b600181811c9082168061141557607f821691505b60208210810361143557634e487b7160e01b600052602260045260246000fd5b50919050565b8082028115828204841417610c8f57610c8f6113d8565b60008261146f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561148657600080fd5b5051919050565b60006020828403121561149f57600080fd5b8151610fd6816110a4565b81810381811115610c8f57610c8f6113d8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101208083526114fb8184018b8d6114bd565b8381036020858101919091528982528a925090810160005b8a8110156115405767ffffffffffffffff61152d8561108c565b1682529282019290820190600101611513565b50848103604086015261155481898b6114bd565b93505085606085015263ffffffff85511660808501528085015191505067ffffffffffffffff80821660a08501528060408601511660c08501525050606083015160e0830152608083015115156101008301529998505050505050505050565b6060815260006115c86060830187896114bd565b82810360208401526115db8186886114bd565b9150508260408301529695505050505050565b60808152600061160260808301898b6114bd565b828103602084015261161581888a6114bd565b9050828103604084015261162a8186886114bd565b91505082606083015298975050505050505050565b601f82111561168957600081815260208120601f850160051c810160208610156116665750805b601f850160051c820191505b8181101561168557828155600101611672565b5050505b505050565b67ffffffffffffffff8311156116a6576116a661105d565b6116ba836116b48354611401565b8361163f565b6000601f8411600181146116ee57600085156116d65750838201355b600019600387901b1c1916600186901b178355611748565b600083815260209020601f19861690835b8281101561171f57868501358255602094850194600190920191016116ff565b508682101561173c5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6020815260006117636020830184866114bd565b94935050505056fea264697066735822122020b49d0e2b709c86daad271462384d2ee84caed352825658b2cb3f746931bcda64736f6c634300081200336080604052670de0b6b3a76400006007553480156200001d57600080fd5b506040518060400160405280601e81526020017f646563656e7472616c697a6564207374616b696e672077697468207373760000815250604051806040016040528060068152602001650e6e6ec8aa8960d31b8152508160039081620000849190620001c3565b506004620000938282620001c3565b505050620000b0620000aa620000c860201b60201c565b620000cc565b600680546001600160a01b031916331790556200028f565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200014957607f821691505b6020821081036200016a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001be57600081815260208120601f850160051c81016020861015620001995750805b601f850160051c820191505b81811015620001ba57828155600101620001a5565b5050505b505050565b81516001600160401b03811115620001df57620001df6200011e565b620001f781620001f0845462000134565b8462000170565b602080601f8311600181146200022f5760008415620002165750858301515b600019600386901b1c1916600185901b178555620001ba565b600085815260208120601f198616915b8281101562000260578886015182559484019460019091019084016200023f565b50858210156200027f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610b7b806200029f6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b4114610241578063a457c2d714610249578063a9059cbb1461025c578063dd62ed3e1461026f578063f2fde38b1461028257600080fd5b806370a08231146101f6578063715018a61461021f57806387269729146102275780638da5cb5b1461023057600080fd5b806323b872dd116100e957806323b872dd14610199578063313ce567146101ac57806339509351146101bb57806340c10f19146101ce57806341640201146101e357600080fd5b806306fdde031461011b5780630754617214610139578063095ea7b31461016457806318160ddd14610187575b600080fd5b610123610295565b60405161013091906109ac565b60405180910390f35b60065461014c906001600160a01b031681565b6040516001600160a01b039091168152602001610130565b610177610172366004610a16565b610327565b6040519015158152602001610130565b6002545b604051908152602001610130565b6101776101a7366004610a40565b610341565b60405160128152602001610130565b6101776101c9366004610a16565b610365565b6101e16101dc366004610a16565b610387565b005b6101e16101f1366004610a7c565b61039d565b61018b610204366004610a95565b6001600160a01b031660009081526020819052604090205490565b6101e16103aa565b61018b60075481565b6005546001600160a01b031661014c565b6101236103be565b610177610257366004610a16565b6103cd565b61017761026a366004610a16565b61044d565b61018b61027d366004610ab7565b61045b565b6101e1610290366004610a95565b610486565b6060600380546102a490610aea565b80601f01602080910402602001604051908101604052809291908181526020018280546102d090610aea565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b5050505050905090565b6000336103358185856104ff565b60019150505b92915050565b60003361034f858285610623565b61035a85858561069d565b506001949350505050565b600033610335818585610378838361045b565b6103829190610b24565b6104ff565b61038f610841565b610399828261089b565b5050565b6103a5610841565b600755565b6103b2610841565b6103bc600061095a565b565b6060600480546102a490610aea565b600033816103db828661045b565b9050838110156104405760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61035a82868684036104ff565b60003361033581858561069d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61048e610841565b6001600160a01b0381166104f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610437565b6104fc8161095a565b50565b6001600160a01b0383166105615760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610437565b6001600160a01b0382166105c25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610437565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061062f848461045b565b90506000198114610697578181101561068a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610437565b61069784848484036104ff565b50505050565b6001600160a01b0383166107015760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610437565b6001600160a01b0382166107635760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610437565b6001600160a01b038316600090815260208190526040902054818110156107db5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610437565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610697565b6005546001600160a01b031633146103bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610437565b6001600160a01b0382166108f15760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610437565b80600260008282546109039190610b24565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b818110156109d9578581018301518582016040015282016109bd565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a1157600080fd5b919050565b60008060408385031215610a2957600080fd5b610a32836109fa565b946020939093013593505050565b600080600060608486031215610a5557600080fd5b610a5e846109fa565b9250610a6c602085016109fa565b9150604084013590509250925092565b600060208284031215610a8e57600080fd5b5035919050565b600060208284031215610aa757600080fd5b610ab0826109fa565b9392505050565b60008060408385031215610aca57600080fd5b610ad3836109fa565b9150610ae1602084016109fa565b90509250929050565b600181811c90821680610afe57607f821691505b602082108103610b1e57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561033b57634e487b7160e01b600052601160045260246000fdfea2646970667358221220dcc5d25ded3e8262278c78752cefade71f713b926ead7576ece524213f45afa264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101395760003560e01c80638da5cb5b116100ab578063cc9fbb761161006f578063cc9fbb7614610375578063df8af7c214610395578063e6ebe20c146103b5578063ed97013b146103ca578063f2fde38b146103ea578063f8d0c40b1461040a57600080fd5b80638da5cb5b146102bf57806398e4349f146102dd578063b7ab4db5146102fd578063bbadc93a1461031f578063bf3a6c0a1461035557600080fd5b80632601d3c7116100fd5780632601d3c71461020c57806327a099d81461022c5780633a4b66f11461024e5780635d3eea9114610256578063715018a6146102765780637b4bc9351461028b57600080fd5b8063060c8ad71461014e57806307d0e5401461017257806307dc739f146101aa5780630df8d1e8146101d75780631b7e5127146101ec57600080fd5b36610149576101473461042a565b005b600080fd5b34801561015a57600080fd5b506009545b6040519081526020015b60405180910390f35b34801561017e57600080fd5b50600554610192906001600160a01b031681565b6040516001600160a01b039091168152602001610169565b3480156101b657600080fd5b506101ca6101c5366004610f64565b610444565b6040516101699190610fc3565b3480156101e357600080fd5b50600a5461015f565b3480156101f857600080fd5b50610147610207366004610f64565b6104f0565b34801561021857600080fd5b50600354610192906001600160a01b031681565b34801561023857600080fd5b5061024161054f565b6040516101699190610fdd565b6101476105b5565b34801561026257600080fd5b50610147610271366004610f64565b610728565b34801561028257600080fd5b50610147610893565b34801561029757600080fd5b5061015f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cb57600080fd5b506000546001600160a01b0316610192565b3480156102e957600080fd5b506101476102f836600461113f565b6108a7565b34801561030957600080fd5b50610312610a1a565b6040516101699190611225565b34801561032b57600080fd5b5061015f61033a366004611287565b6001600160a01b03166000908152600b602052604090205490565b34801561036157600080fd5b506101476103703660046112b0565b610af3565b34801561038157600080fd5b50600654610192906001600160a01b031681565b3480156103a157600080fd5b50600454610192906001600160a01b031681565b3480156103c157600080fd5b5061015f610c22565b3480156103d657600080fd5b506101476103e5366004611353565b610c95565b3480156103f657600080fd5b50610147610405366004611287565b610ce5565b34801561041657600080fd5b50600254610192906001600160a01b031681565b80600a600082825461043c91906113ee565b909155505050565b6008818154811061045457600080fd5b90600052602060002001600091509050805461046f90611401565b80601f016020809104026020016040519081016040528092919081815260200182805461049b90611401565b80156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b505050505081565b6104f8610d5e565b600981905560085460009061050e90602061143b565b60085461051c90602061143b565b600a5460095461052c91906113ee565b61053691906113ee565b6105409190611452565b905061054b81610db8565b5050565b610557610e95565b60408051608081019182905290600790600490826000855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161056f5790505050505050905090565b600034116105dd57604051639ed431ad60e01b81523460048201526024015b60405180910390fd5b6004805460408051638726972960e01b81529051600093670de0b6b3a7640000936001600160a01b031692638726972992818301926020928290030181865afa15801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190611474565b61065c903461143b565b6106669190611452565b600480546040516340c10f1960e01b81523392810192909252602482018390529192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b5050604080513381523460208201527f8c265adcfa641899d6632b86254dda7a76f27701f1d21a732621d51f2328c460935001905060405180910390a1336000908152600b60205260408120805434929061043c9084906113ee565b600480546040516323b872dd60e01b81523392810192909252306024830152604482018390526001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a4919061148d565b506000600460009054906101000a90046001600160a01b03166001600160a01b031663872697296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190611474565b6108289083611452565b61083a90670de0b6b3a764000061143b565b604051909150339082156108fc029083906000818181858888f1935050505015801561086a573d6000803e3d6000fd5b50336000908152600b60205260408120805484929061088a9084906114aa565b90915550505050565b61089b610d5e565b6108a56000610e45565b565b6002546001600160a01b031633146108e7576002546040516301f5a31f60e71b81523360048201526001600160a01b0390911660248201526044016105d4565b60055460065460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610960919061148d565b5060065460405163967ef80760e01b81526001600160a01b039091169063967ef8079061099f908b908b908b908b908b908b908b908b906004016114e6565b600060405180830381600087803b1580156109b957600080fd5b505af11580156109cd573d6000803e3d6000fd5b505050507fb23f6ce72d618df33a33105741ed7e13469f7f9ca6eda19e5e505b28783b1f288888868686604051610a089594939291906115b4565b60405180910390a15050505050505050565b60606008805480602002602001604051908101604052809291908181526020016000905b82821015610aea578382906000526020600020018054610a5d90611401565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8990611401565b8015610ad65780601f10610aab57610100808354040283529160200191610ad6565b820191906000526020600020905b815481529060010190602001808311610ab957829003601f168201915b505050505081526020019060010190610a3e565b50505050905090565b6040516304512a2360e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906322895118907f000000000000000000000000000000000000000000000000000000000000000090610b6d908b908b908b908b908b908b908b906004016115ee565b6000604051808303818588803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b5050600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3019250610bdf9150889050898361168e565b507f144679c9e19454710222d38e13b257573a15b6ca6a4d10a1254ebc2480cb68638787604051610c1192919061174f565b60405180910390a150505050505050565b6004805460408051638726972960e01b8152905160009384936001600160a01b031692638726972992818301926020928290030181865afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f9190611474565b92915050565b610c9d610d5e565b610caa6007826004610eb3565b507fa31d33307023a78b2b477792a91efbed5ee91448638292c891e81233cb6108f881604051610cda9190610fdd565b60405180910390a150565b610ced610d5e565b6001600160a01b038116610d525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d4565b610d5b81610e45565b50565b6000546001600160a01b031633146108a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d4565b60048054604051634164020160e01b81529182018390526001600160a01b031690634164020190602401600060405180830381600087803b158015610dfc57600080fd5b505af1158015610e10573d6000803e3d6000fd5b505050507fce44720b7462058f31ddecab3daa427921e5975d9acb555f043682dada86656981604051610cda91815260200190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180608001604052806004906020820280368337509192915050565b600183019183908215610f3f5791602002820160005b83821115610f0d57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610ec9565b8015610f3d5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610f0d565b505b50610f4b929150610f4f565b5090565b5b80821115610f4b5760008155600101610f50565b600060208284031215610f7657600080fd5b5035919050565b6000815180845260005b81811015610fa357602081850181015186830182015201610f87565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610fd66020830184610f7d565b9392505050565b60808101818360005b600481101561100b57815163ffffffff16835260209283019290910190600101610fe6565b50505092915050565b60008083601f84011261102657600080fd5b50813567ffffffffffffffff81111561103e57600080fd5b60208301915083602082850101111561105657600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff8116811461108757600080fd5b919050565b803567ffffffffffffffff8116811461108757600080fd5b8015158114610d5b57600080fd5b600060a082840312156110c457600080fd5b60405160a0810181811067ffffffffffffffff821117156110e7576110e761105d565b6040529050806110f683611073565b81526111046020840161108c565b60208201526111156040840161108c565b6040820152606083013560608201526080830135611132816110a4565b6080919091015292915050565b600080600080600080600080610120898b03121561115c57600080fd5b883567ffffffffffffffff8082111561117457600080fd5b6111808c838d01611014565b909a50985060208b013591508082111561119957600080fd5b818b0191508b601f8301126111ad57600080fd5b8135818111156111bc57600080fd5b8c60208260051b85010111156111d157600080fd5b6020830198508097505060408b01359150808211156111ef57600080fd5b506111fc8b828c01611014565b909550935050606089013591506112168a60808b016110b2565b90509295985092959890939650565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561127a57603f19888603018452611268858351610f7d565b9450928501929085019060010161124c565b5092979650505050505050565b60006020828403121561129957600080fd5b81356001600160a01b0381168114610fd657600080fd5b60008060008060008060006080888a0312156112cb57600080fd5b873567ffffffffffffffff808211156112e357600080fd5b6112ef8b838c01611014565b909950975060208a013591508082111561130857600080fd5b6113148b838c01611014565b909750955060408a013591508082111561132d57600080fd5b5061133a8a828b01611014565b989b979a50959894979596606090950135949350505050565b60006080828403121561136557600080fd5b82601f83011261137457600080fd5b6040516080810181811067ffffffffffffffff821117156113975761139761105d565b6040528060808401858111156113ac57600080fd5b845b818110156113cd576113bf81611073565b8352602092830192016113ae565b509195945050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c8f57610c8f6113d8565b600181811c9082168061141557607f821691505b60208210810361143557634e487b7160e01b600052602260045260246000fd5b50919050565b8082028115828204841417610c8f57610c8f6113d8565b60008261146f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561148657600080fd5b5051919050565b60006020828403121561149f57600080fd5b8151610fd6816110a4565b81810381811115610c8f57610c8f6113d8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101208083526114fb8184018b8d6114bd565b8381036020858101919091528982528a925090810160005b8a8110156115405767ffffffffffffffff61152d8561108c565b1682529282019290820190600101611513565b50848103604086015261155481898b6114bd565b93505085606085015263ffffffff85511660808501528085015191505067ffffffffffffffff80821660a08501528060408601511660c08501525050606083015160e0830152608083015115156101008301529998505050505050505050565b6060815260006115c86060830187896114bd565b82810360208401526115db8186886114bd565b9150508260408301529695505050505050565b60808152600061160260808301898b6114bd565b828103602084015261161581888a6114bd565b9050828103604084015261162a8186886114bd565b91505082606083015298975050505050505050565b601f82111561168957600081815260208120601f850160051c810160208610156116665750805b601f850160051c820191505b8181101561168557828155600101611672565b5050505b505050565b67ffffffffffffffff8311156116a6576116a661105d565b6116ba836116b48354611401565b8361163f565b6000601f8411600181146116ee57600085156116d65750838201355b600019600387901b1c1916600186901b178355611748565b600083815260209020601f19861690835b8281101561171f57868501358255602094850194600190920191016116ff565b508682101561173c5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6020815260006117636020830184866114bd565b94935050505056fea264697066735822122020b49d0e2b709c86daad271462384d2ee84caed352825658b2cb3f746931bcda64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositShares(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,uint256,bool))": {
        "details": "Callable by the whitelisted address",
        "params": {
          "_amount": ": Amount of tokens to be deposited",
          "_cluster": ": Latest Cluster information",
          "_operatorIds": ": IDs of the validator's operators",
          "_pubkey": ": Public key of the validator",
          "_shares": ": Public keys of the shares"
        }
      },
      "depositValidator(bytes,bytes,bytes,bytes32)": {
        "params": {
          "_deposit_data_root": ": Root of the deposit data",
          "_pubkey": ": Public key of the validator",
          "_signature": ": Signature of the deposit data",
          "_withdrawal_credentials": ": Withdrawal credentials of the validator"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unStake(uint256)": {
        "params": {
          "_amount": ": Amount to be unstaked"
        }
      },
      "updateBeaconRewards(uint256)": {
        "details": "Update share price of the staking pool",
        "params": {
          "_newBeaconRewards": ": The new beacon rewards amount"
        }
      },
      "updateOperators(uint32[4])": {
        "details": "Update operators",
        "params": {
          "_newOperators": ": Array of the the new operators Ids"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "StakingPool__CantStakeZeroAmount(uint256)": [
        {
          "notice": "this contract utilizes custom errors to optimize gas usage, instead of normal `require` conditionals. By using custom errors instead, we don't need to use up storage space on the `require`'s revert string messages. This also allows developers and users to see customizable output values when the custom error is invoked "
        }
      ]
    },
    "kind": "user",
    "methods": {
      "depositShares(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,uint256,bool))": {
        "notice": "Deposit shares for a validator"
      },
      "depositValidator(bytes,bytes,bytes,bytes32)": {
        "notice": "Deposit a validator to the deposit contract"
      },
      "getBeaconRewards()": {
        "notice": "Get beacon rewards"
      },
      "getExecutionRewards()": {
        "notice": "Get execution rewards"
      },
      "getOperators()": {
        "notice": "Get operator ids, check operators here https://explorer.ssv.network/"
      },
      "getShareprice()": {
        "notice": "Get share price"
      },
      "getUserStake(address)": {
        "notice": "Get user's staked amount"
      },
      "getValidators()": {
        "notice": "Get validators array"
      },
      "stake()": {
        "notice": "Stake tokens"
      },
      "unStake(uint256)": {
        "notice": "Unstake tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 512,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2423,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "WhitelistKeyGenerator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2425,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "WITHDRAWAL_ADDRESS",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2431,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "ssvETH",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SSVETH)2398"
      },
      {
        "astId": 2438,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "SSV_TOKEN_ADDR",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2440,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "SSV_CONTRACT_ADDR",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2444,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "OperatorIDs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint32)4_storage"
      },
      {
        "astId": 2447,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "Validators",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 2449,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "beaconRewards",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2451,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "executionRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2455,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "userStake",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)4_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[4]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(SSVETH)2398": {
        "encoding": "inplace",
        "label": "contract SSVETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
